{"mappings":"AAAA,aAEA,MAAMA,IAAM,CAEXC,MAAO,CACNC,KAAM,GACNC,YAAa,GAMbC,IAAK,+FACLC,YAAa,UAIdC,SAASC,GACRC,KAAKP,MAAQ,IACTO,KAAKP,SACLM,GAGJC,KAAKC,Q,EAINC,WAAWT,GAENA,GAAOO,KAAKF,SAAS,CAAEL,UAG3B,MAAMU,EAAQH,KAAKI,WAAWJ,KAAKP,MAAMI,aAGzC,GAAIM,EAAOH,KAAKF,SAAS,CAAEJ,KAAMS,QAG5B,CAEJ,MAAMT,QAAaM,KAAKK,MAAML,KAAKP,MAAMG,KAGrCF,IAGHM,KAAKF,SAAS,CAAEJ,SAGhBM,KAAKM,WAAWN,KAAKP,MAAMI,YAAaH,G,CAK1C,MAAMa,EAASC,SAASC,eAAe,UAGjCC,EAASF,SAASC,eAAe,UAGjCE,EAAOH,SAASC,eAAe,QAGrC,GAAIT,KAAKP,MAAMC,KAAKkB,OAAQ,CAE3B,MAAMjB,EAAcK,KAAKa,eAAe,eAExCb,KAAKF,SAAS,CAAEH,gBAChBY,EAAOO,MAAQnB,EAGfY,EAAOQ,gBAAgB,YAGvBL,EAAOK,gBAAgB,YAGvBJ,EAAKK,iBAAiB,SAAUhB,KAAKO,OAAOU,KAAKzB,IAAKe,G,MAKtDA,EAAOW,aAAa,YAGpBR,EAAOQ,aAAa,YAGpBP,EAAKQ,oBAAoB,SAAUnB,KAAKO,QAIzCP,KAAKC,Q,EAINY,eAAc,CAACO,EAAY,KAEL,IAAIC,gBAAgBC,OAAOC,SAAShB,QAGxBiB,IAAIJ,GAOtCb,OAAQ,CAACA,EAAQkB,KAEhBA,EAAMC,iBAGN,MAAM/B,EAAcY,EAAOO,MAG3BtB,IAAIM,SAAS,CAAEH,gBAGf,MAAMgC,SAAEA,EAAQC,KAAEA,EAAIC,SAAEA,GAAaP,OAAOC,SAGtCO,EAAS,GAAGH,MAAaC,IAAOC,iBAAwBlC,IAG9D2B,OAAOS,QAAQC,UAAU,CAAEC,KAAMH,GAAU,GAAIA,EAAO,EAIvD1B,WAAY8B,GACXA,GAAOC,KAAKC,MAAMC,eAAeC,QAAQJ,IAG1C5B,WAAY,CAAC4B,EAAKxC,IACjB2C,eAAeE,QAAQL,EAAKC,KAAKK,UAAU9C,IAG5CQ,YAAYN,GAEX,IAAIF,EAWJ,aATMW,MAAMT,GACV6C,MAAKC,GAAOA,EAAIC,SAChBF,MAAKE,IACLjD,EAAOiD,EACAA,KAEPC,MAAMC,QAAQC,OAGTpD,C,EAIRO,SAEC,MAAM8C,EAAOvC,SAASC,eAAe,cAGrC,GAAIT,KAAKP,MAAMC,KAAKkB,OAAQ,CAE3B,MAAMoC,EAAWxC,SAASC,eAAe,wBAGzCsC,EAAKE,UAAY,GAGjBjD,KAAKP,MAAMC,KAETwD,QAAO,EAAGC,YAEV,MAAMxD,YAAEA,GAAgBK,KAAKP,MAG7B,GAAIO,KAAKP,MAAME,YAAa,CAE3B,OADc,IAAIyD,OAAOzD,EAAa,KACzB0D,KAAKF,E,CAInB,OAAO,CAAI,IAGXG,SAAQ,CAACC,EAAMC,KAGf,MAAMC,EAAQT,EAASU,QAAQC,WAAU,GAGnCR,EAAQM,EAAMG,cAAc,gBAG5BC,EAAOJ,EAAMG,cAAc,eAGjCT,EAAMW,YAAcP,EAAKJ,MAGzBU,EAAKC,YAAcP,EAAKQ,KAGxB,MAAMC,EAAUxD,SAASyD,cAAc,IAAIT,EAAQ,MAGnDC,EAAMS,QAAQF,GAGdjB,EAAKoB,YAAYV,EAAM,G,MAMzBV,EAAKqB,UAAY,iB,GAMpB5D,SAASQ,iBAAiB,oBAAoB,KAE7CxB,IAAI6E,MAAM","sources":["index.js"],"sourcesContent":["'use strict'\n\nconst app = {\n\t// Initial state\n\tstate: {\n\t\tdata: [],\n\t\tsearchQuery: '',\n\n\t\t// External data API\n\t\t// url: 'https://jsonplaceholder.typicode.com/posts/?_start=0&_limit=7',\n\n\t\t// Github data API\n\t\turl: 'https://raw.githubusercontent.com/Andrew-Dyachenko/test-task-for-candidates/master/data.json',\n\t\tstorageName: 'gate31'\n\t},\n\n\t// Set state func\n\tsetState(newState) {\n\t\tthis.state = {\n\t\t\t...this.state,\n\t\t\t...newState\n\t\t}\n\n\t\tthis.render();\n\t},\n\n\t// Init\n\tasync init(state) {\n\t\t// Add user data to the state if it's exist\n\t\tif (state) this.setState({ state });\n\n\t\t// Get cache\n\t\tconst cache = this.getStorage(this.state.storageName);\n\n\t\t// Set cache instead of fetch\n\t\tif (cache) this.setState({ data: cache });\n\n\t\t// Set cache\n\t\telse {\n\t\t\t// Fetch data\n\t\t\tconst data = await this.fetch(this.state.url);\n\n\t\t\t// If data is correct save it to storage and state\n\t\t\tif (data) {\n\n\t\t\t\t// Set state\n\t\t\t\tthis.setState({ data });\n\n\t\t\t\t// Set storage\n\t\t\t\tthis.setStroage(this.state.storageName, data);\n\t\t\t}\n\t\t}\n\n\t\t// Get search field\n\t\tconst search = document.getElementById('search');\n\n\t\t// Get submit button\n\t\tconst submit = document.getElementById('submit');\n\n\t\t// Get form\n\t\tconst form = document.getElementById('form');\n\n\t\t// If data exist\n\t\tif (this.state.data.length) {\n\t\t\t// Get URL bar search\n\t\t\tconst searchQuery = this.getSearchParam('searchQuery');\n\n\t\t\tthis.setState({ searchQuery });\n\t\t\tsearch.value = searchQuery;\n\n\t\t\t// Enable serach field\n\t\t\tsearch.removeAttribute('disabled');\n\n\t\t\t// Enable submit button\n\t\t\tsubmit.removeAttribute('disabled');\n\n\t\t\t// Add form onsubmit event\n\t\t\tform.addEventListener('submit', this.search.bind(app, search));\n\t\t}\n\n\t\telse {\n\t\t\t// Disable serach field\n\t\t\tsearch.addAttribute('disabled');\n\n\t\t\t// Disable submit button\n\t\t\tsubmit.addAttribute('disabled');\n\n\t\t\t// Remove form onsubmit event\n\t\t\tform.removeEventListener('submit', this.search);\n\t\t}\n\n\t\t// Render list\n\t\tthis.render();\n\t},\n\n\t// Get URL search param(s)\n\tgetSearchParam(paramName = '') {\n\t\t// Create search params object from existing window location URL\n\t\tconst searchParams = new URLSearchParams(window.location.search);\n\n\t\t// Find & extract neccessary param\n\t\tconst searchQuery = searchParams.get(paramName);\n\n\t\t// Return founded param\n\t\treturn searchQuery;\n\t},\n\n\t// Search\n\tsearch: (search, event) => {\n\t\t// Prevent default html form behavior\n\t\tevent.preventDefault();\n\n\t\t// Get search value (query)\n\t\tconst searchQuery = search.value;\n\n\t\t// Set search query to the state\n\t\tapp.setState({ searchQuery });\n\n\t\t// Get window.location properties\n\t\tconst { protocol, host, pathname } = window.location;\n\n\t\t// Create new URL with searchQuery\n\t\tconst newURL = `${protocol}//${host}${pathname}?searchQuery=${searchQuery}`;\n\n\t\t// Push the new history URL to the address bar without the page reload\n\t\twindow.history.pushState({ path: newURL }, '', newURL);\n\t},\n\n\t// Get Session Storage\n\tgetStorage: key =>\n\t\tkey && JSON.parse(sessionStorage.getItem(key)),\n\n\t// Set Session Storage\n\tsetStroage: (key, data) =>\n\t\tsessionStorage.setItem(key, JSON.stringify(data)),\n\n\t// Fetch wrapper\n\tasync fetch(url) {\n\t\t// Initial fetch data\n\t\tlet data;\n\n\t\tawait fetch(url)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tdata = json;\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(console.error);\n\n\t\t// Return fetch data result\n\t\treturn data;\n\t},\n\n\t// Render app\n\trender() {\n\t\t// List\n\t\tconst list = document.getElementById('form__list');\n\n\t\t// If data array is not empty\n\t\tif (this.state.data.length) {\n\t\t\t// Template\n\t\t\tconst template = document.getElementById('form__item--template');\n\n\t\t\t// Clear DOM list before a new render\n\t\t\tlist.innerHTML = '';\n\n\t\t\t// Render all data\n\t\t\tthis.state.data\n\t\t\t\t// Filter data by the search field\n\t\t\t\t.filter(({ title }) => {\n\t\t\t\t\t// Get search query\n\t\t\t\t\tconst { searchQuery } = this.state;\n\n\t\t\t\t\t// Filter condition\n\t\t\t\t\tif (this.state.searchQuery) {\n\t\t\t\t\t\tconst regex = new RegExp(searchQuery, 'g');\n\t\t\t\t\t\treturn regex.test(title);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If search query is empty cancel filtering\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t\t// Display ...rest data after the filtering\n\t\t\t\t.forEach((item, index) => {\n\n\t\t\t\t\t// Clone template\n\t\t\t\t\tconst clone = template.content.cloneNode(true);\n\n\t\t\t\t\t// Find title node inside a clone\n\t\t\t\t\tconst title = clone.querySelector('.item__title');\n\n\t\t\t\t\t// Find text node inside a clone\n\t\t\t\t\tconst text = clone.querySelector('.item__text');\n\n\t\t\t\t\t// Fill the title clone\n\t\t\t\t\ttitle.textContent = item.title;\n\n\t\t\t\t\t// Fill the text clone\n\t\t\t\t\ttext.textContent = item.body;\n\n\t\t\t\t\t// Create comment with item's index\n\t\t\t\t\tconst comment = document.createComment(` ${index + 1} `)\n\n\t\t\t\t\t// Prepend the comment inside the clone\n\t\t\t\t\tclone.prepend(comment);\n\n\t\t\t\t\t// Append the clone\n\t\t\t\t\tlist.appendChild(clone);\n\t\t\t\t});\n\t\t}\n\n\t\t// If data array is empty\n\t\telse {\n\t\t\tlist.innerText = 'No data founded';\n\t\t}\n\t}\n}\n\n// We don't actually need DOMContentLoaded because of the defer attribute, but we use it as a fallback\ndocument.addEventListener('DOMContentLoaded', () => {\n\t// App init\n\tapp.init();\n});\n"],"names":["app","state","data","searchQuery","url","storageName","setState","newState","this","render","async","cache","getStorage","fetch","setStroage","search","document","getElementById","submit","form","length","getSearchParam","value","removeAttribute","addEventListener","bind","addAttribute","removeEventListener","paramName","URLSearchParams","window","location","get","event","preventDefault","protocol","host","pathname","newURL","history","pushState","path","key","JSON","parse","sessionStorage","getItem","setItem","stringify","then","res","json","catch","console","error","list","template","innerHTML","filter","title","RegExp","test","forEach","item","index","clone","content","cloneNode","querySelector","text","textContent","body","comment","createComment","prepend","appendChild","innerText","init"],"version":3,"file":"index.1ad5d520.js.map"}